*以下のようなフォルダ構成を想定する
・プロジェクト名(名前は任意)
    -docker
        -mysql
        -spring
        -vue
    -spring_project
    -vue_project
        -gitkeep
    -README

手順①:Dockerfileやdocekr-compose.ymlの作成(必要な設定ファイル等の作成)
dockerフォルダ内のものを準備する

手順②springのプロジェクトをspring initializr等で雛形を作成する
spring_projectフォルダ内のものを準備する

手順③Vue.jsを使えるようにするためにnode.js等をインストールする。以下のコマンドを実行する
    (1) docker-compose build(以下のようになれば成功)
        ...
        ...
        Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
    
    (2) docker-compose up -d(以下のようになれば成功)
        Creating vue   ... done
        Creating mysql ... done
        Creating spring ... done
    
    (3) docker exec -it vue /bin/bash(以下のようになれば成功)
        root@5beed6368322:/usr/src/app# 
    
手順④Vueのプロジェクトを作成する ※dockerのコマンドで起動したbashの続きから
    (1) vue create .
    (2) npm run serve
    (3) http://localhost:9000/にアクセスする(docker-compose.ymlの設定に異なる)


手順⑤Vue Routerの追加
    (1) npm install vue-router@4
    (2) vue.config.jsの修正 (EsLintの対策)
        lintOnSave: false
    (3) router.jsの追加 (フォルダ構成やファイル名は任意でOK)
    (4) src/main.jsの修正
        import router from './router/router.js' (追加)
        import { createApp } from 'vue' (追加)
        // createApp(App).mount('#app')
        // new Vue({
        //     router,
        //     render: function (h) { return h(App) },
        // }).$mount('#app') (削除)

        createApp(App).use(router).mount('#app') (追加)
    


手順⑥BootStrapの追加
    (1) npm install vue bootstrap-vue bootstrap
    (2) src/main.jsにbootstrapをimportする
        import "bootstrap/dist/css/bootstrap.min.css"
        import "bootstrap/dist/js/bootstrap.js"

手順⑦axios追加
    (1) npm install axios

手順⑧DBの設定
    (1) docker-compose exec mysql /bin/bash
    (2) mysql -h 127.0.0.1 -P 3306 -uroot -proot
    (3) show databases;
    (4) use mysqldb;
    (5) source /docker-entrypoint-initdb.d/init.sql;
    (6) show tables;

その他
①停止しているコンテナの一覧表示
    docker ps -a
    CONTAINER ID   IMAGE           COMMAND                  CREATED       STATUS  
    ...
    ...

②コンテナの削除
docker rm [CONTAINER ID]

③イメージの一覧表示
    docker images
    REPOSITORY      TAG                            IMAGE ID       CREATED        SIZE
    ...
    ...

④イメージの削除
docker rmi [IMAGE ID]

⑤イメージ、コンテナ等のDockerオブジェクトを全て削除
docker system prune -a

⑥再度UP
docker-compose down
docker-compose up -d

※注意
application.propertiesのspring.datasource.urlをlocalhost(127.0.0.1)を
指定してもコンテナが違うため指定するPortが異なる
以下のコマンドでPortを確認する
(1)docker-compose exec mysql /bin/bash
(2)cat /etc/hosts
    127.0.0.1	localhost
    ::1	localhost ip6-localhost ip6-loopback
    fe00::0	ip6-localnet
    ff00::0	ip6-mcastprefix
    ff02::1	ip6-allnodes
    ff02::2	ip6-allrouters
    172.27.0.3	05e44bbd80f1
(3)(2)の結果の場合は172.27.0.3がPortとなる